#!/bin/bash
# sk8 - package manager for rollerblades (https://github.com/chr1573r/rollerblades)



# Function to load configuration from file or set default values
load_config() {

  if [[ -z "$SK8_DIR" ]]; then
      SK8_DIR="$HOME/.sk8"
  fi

  if ! [[ -d "$SK8_DIR" ]]; then
    echo "Setup: Initializing sk8 dir '$SK8_DIR'"
    mkdir "$SK8_DIR"
  fi

  if ! [[ -d "$SK8_DIR" ]]; then
    echo "Error: Cannot access sk8 dir '$SK8_DIR'"
    exit 1
  fi

  if ! [[ -d "$SK8_DIR/cache" ]]; then
    echo "Setup: Initializing cache dir in '$SK8_DIR'"
    mkdir "$SK8_DIR/cache"
  fi


  if ! [[ -d "$SK8_DIR/package" ]]; then
    echo "Setup: Initializing package dir in '$SK8_DIR'"
    mkdir "$SK8_DIR/package"
  fi

  if [[ -f "$SK8_DIR/config" ]]; then
    source "$SK8_DIR/config"
  else
    echo "Warning: sk8 config could not be loaded, using defaults"
    # Default values
    #PATH_FILE="$HOME/.bashrc"
  fi

  if [[ -z "$SK8_RB_URL" ]]; then
    echo "Error: Rollerblades url not set. Aborting"
    exit 1
  fi

  if ! [[ -f "$SK8_DIR/cache/rollerblades.pub" ]]; then
    echo "Setup: Downloading a local copy of rb repo public key..."
    dl rollerblades.pub || {
    echo "Error: Failed to download repo public key for package verification."
    exit 1
    }
  fi

} 

# Curl wrapper for any download activity
dl(){

  echo "Downloading '$1'"

  curl -s "${SK8_RB_URL}/$1" -o "$SK8_DIR/cache/$1" || {
    echo "Error: Failed to download '${SK8_RB_URL}/$1'"
    return 1
  }

}

# Function to verify package integrity
verify_package() {
  package="$1"

  # Verify package signature
  echo "Verifying package $package..."
  dl "$package.signature" || {
    echo "Error: Failed to download package signature for $package."
    return 1
  }

  openssl dgst -verify "$SK8_DIR/cache/rollerblades.pub" -signature "$SK8_DIR/cache/$package.signature" "$SK8_DIR/cache/$package.tar.gz" >/dev/null 2>&1 || {
    echo "Error: Package $package signature verification failed."
    return 1
  }

  echo "Package $package has been verified."
}

# Function to install a package
install_package() {
  package="$1"
  url="${SK8_RB_URL}/$package.tar.gz"

  if [[ -d "$SK8_DIR/package/$package" ]]; then
    echo "Package '$package' is already installed."
    return
  fi

  echo "Installing $package..."
  mkdir -p "$SK8_DIR/package/$package"
  dl "$package.tar.gz" || {
    echo "Error: Failed to download package '$package'."
    return 1
  }

  verify_package "$package" || {
    echo "Error: Failed to verify package '$package'."
    return 1
  }

  tar -xvz -C "$SK8_DIR/package/$package" -f "$SK8_DIR/cache/$package.tar.gz" || {
    echo "Error: Failed to extract package '$package'."
    return 1
  }

  # Add package executables to the user's path
  #echo "export PATH=\"$SK8_DIR/package/$package:\$PATH\"" >> "$PATH_FILE"
  #source "$PATH_FILE"

  echo "'$package' has been installed in '$SK8_DIR/package/$package'"
}

# Function to remove a package
remove_package() {
  if [[ "$1" == "" ]]; then 
    echo "Error: No package specified."
    return 1
  fi
  package="$1"

  if [[ ! -d "$SK8_DIR/package/$package" ]]; then
    echo "Package $package is not installed."
    return
  fi

  echo "Removing $package..."
  rm -r "${SK8_DIR}/package/${package}" || {
    echo "Error: Failed to remove $package."
    return 1
  }

  # Remove package executables from the user's path
  #sed -i "/$package/d" "$PATH_FILE"
  #source "$PATH_FILE"

  echo "$package has been removed."
}

# Function to update a package
update_package() {
  if [[ "$1" == "" ]]; then 
    echo "Error: No package specified."
    return 1
  fi
  package="$1"
  url="${SK8_RB_URL}/$package.tar.gz"

  if [[ ! -d "$SK8_DIR/package/$package" ]]; then
    echo "Package $package is not installed."
    return
  fi

  echo "Updating $package..."

    dl "$package.tar.gz" || {
    echo "Error: Failed to download package $package."
    return 1
  }

  verify_package "$package" || {
    echo "Error: Failed to verify package $package."
    return 1
  }

  #rm -r "${SK8_DIR}/${package}" || {
  #  echo "Error: Failed to update $package."
  #  return 1
  #}

  tar -xvz -C "$SK8_DIR/package/$package" -f "$SK8_DIR/cache/$package.tar.gz" || {
    echo "Error: Failed to extract package $package."
    return 1
  }

  echo "$package has been updated."
}

# Main script
load_config

case "$1" in
  install)
    install_package "$2"
    ;;
  remove)
    remove_package "$2"
    ;;
  update)
    update_package "$2"
    ;;
  reinstall|force-install|re-install)
    remove_package "$2"
    install_package "$2"
    ;;
  *)
    echo "Usage: $0 [install|reinstall|remove|update] package_name"
    exit 1
    ;;
esac

